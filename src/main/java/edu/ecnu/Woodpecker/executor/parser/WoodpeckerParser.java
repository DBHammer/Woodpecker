/* WoodpeckerParser.java */
/* Generated By:JavaCC: Do not edit this line. WoodpeckerParser.java */
package edu.ecnu.Woodpecker.executor.parser;

import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import java.io.PrintWriter;

import edu.ecnu.Woodpecker.controller.TestController;
import edu.ecnu.Woodpecker.sql.DbmsBrand;

import com.alibaba.druid.sql.SQLUtils;

public class WoodpeckerParser implements WoodpeckerParserConstants {
        // key是变量名，value是变量的值
        static Map<String, Object > varValueMap = null;
        // key是变量名，value是变量对应的数据类型
        static Map<String, String> varTypeMap = null;

        String var = null;
        Object value = null;
        StringBuilder type = new StringBuilder();

        // 用于存储连续声明时第一个变量的数据类型
        String lastType = null;

        // 用于标志一个变量是否是List
        static boolean isList;
        List<Object> listValue = new ArrayList<Object>();

        // 中间结果集
        static PrintWriter midResultPW = null;

        // 行号和文法编号
        public static int lineNumber;
        static int grammarNumber = 0;

        // 判断文法编号的状态位，末尾4位分别表示是否有数据类型，是否有变量赋值，是否有关键字，是否处在条件表达式中
        static byte staBit = 0;

        // 存储当前行的内容
        static StringBuilder pwLine = new StringBuilder();

        // 判断是不是只声明了变量
        static boolean canPrint = true;
        // Current database brand
        static DbmsBrand brand = null;

        public static boolean parseCaseFile(File caseFile)
        {
            brand = TestController.getDatabase();
                // 每个文件重置行号
                lineNumber = 1;
                WoodpeckerParser wpParser = null;
                InputStreamReader isr = null;
                isList = false;
                try
                {
                        isr = new InputStreamReader(new FileInputStream(caseFile),"utf-8");
                        wpParser = new WoodpeckerParser(isr);
                        wpParser.parse();
                        isAllVarDeclarative();
                }
                catch(Exception e)
                {
                        // 返回此次parse失败
                        System.out.println(String.format("Error in line: %d", lineNumber));
                        e.printStackTrace();
                        return false;
                }
                finally
                {
                        try
                        {
                                isr.close();
                        }catch(Exception e){}
                }
                return true;
        }

        // 设置变量表
        public static void setVarMap(Map<String,Object> varValueMap,Map<String,String> varTypeMap)
        {
                WoodpeckerParser.varValueMap = varValueMap;
                WoodpeckerParser.varTypeMap = varTypeMap;
        }

        public static void setMidResultPW(PrintWriter midResultPW)
        {
                WoodpeckerParser.midResultPW = midResultPW;
        }

        // 判断变量表的所有变量是否都已声明
        private static void isAllVarDeclarative() throws Exception
        {
                for(Entry<String,String> entry : varTypeMap.entrySet())
                {
                        if(entry.getValue().length()==0)
                                throw new Exception(String.format("variable %s isn't declarative", entry.getKey()));
                }
        }

        public static void main(String args []) throws ParseException
        {}

/********************************************************
 * 语法分析 start from here	*
 ********************************************************/

// 解析器入口
  final public void parse() throws ParseException, Exception {
    Statement();
}

/* 数据类型的语法匹配 */

//所有的数据类型
  final public void DataType() throws ParseException, Exception {Token dataType=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case STRING:
    case DECIMAL:
    case TIMESTAMP:{
      BasicDataType();
      break;
      }
    case CONNECTION:{
      dataType = jj_consume_token(CONNECTION);
      break;
      }
    case STATEMENT:{
      dataType = jj_consume_token(STATEMENT);
      break;
      }
    case PSTATEMENT:{
      dataType = jj_consume_token(PSTATEMENT);
      break;
      }
    case CSTATEMENT:{
      dataType = jj_consume_token(CSTATEMENT);
      break;
      }
    case SESSION:{
      dataType = jj_consume_token(SESSION);
      break;
      }
    case LIST:{
      List_DataType();
      break;
      }
    case RESULTSET:{
      dataType = jj_consume_token(RESULTSET);
      break;
      }
    case IDEALRESULTSET:{
      IdealResultSet_DataType();
      break;
      }
    case PERFORMANCERESULT:{
      dataType = jj_consume_token(PERFORMANCERESULT);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(dataType!=null)
                {
                        type.append(dataType.toString());
                        pwLine.append(dataType.toString());
                }
}

//基本数据类型
  final public void BasicDataType() throws ParseException {Token dataType = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      dataType = jj_consume_token(BOOLEAN);
      break;
      }
    case CHAR:{
      dataType = jj_consume_token(CHAR);
      break;
      }
    case BYTE:{
      dataType = jj_consume_token(BYTE);
      break;
      }
    case SHORT:{
      dataType = jj_consume_token(SHORT);
      break;
      }
    case INT:{
      dataType = jj_consume_token(INT);
      break;
      }
    case LONG:{
      dataType = jj_consume_token(LONG);
      break;
      }
    case FLOAT:{
      dataType = jj_consume_token(FLOAT);
      break;
      }
    case DOUBLE:{
      dataType = jj_consume_token(DOUBLE);
      break;
      }
    case STRING:{
      dataType = jj_consume_token(STRING);
      break;
      }
    case DECIMAL:{
      dataType = jj_consume_token(DECIMAL);
      break;
      }
    case TIMESTAMP:{
      dataType = jj_consume_token(TIMESTAMP);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
type.append(dataType.toString());
          pwLine.append(dataType.toString());
}

//List数据类型
  final public void List_DataType() throws ParseException {
    jj_consume_token(LIST);
    jj_consume_token(LT);
type.append("List<");
                isList = true;
                pwLine.append("List<");
    BasicDataType();
    jj_consume_token(GT);
type.append(">");
                pwLine.append(">");
}

//IdealResultSet数据类型
  final public void IdealResultSet_DataType() throws ParseException {
    jj_consume_token(IDEALRESULTSET);
    jj_consume_token(LT);
type.append("IdealResultSet<");
                pwLine.append("IdealResultSet<");
    BasicDataType();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
type.append(",");
                pwLine.append(",");
      BasicDataType();
    }
    jj_consume_token(GT);
type.append(">");
                pwLine.append(">");
}

/* 变量声明及初始化 */
  final public void VariableDeclaration() throws ParseException, Exception {
midResultPW.print(lineNumber+",");
    DataType();
staBit|=4;
                pwLine.append(" ");
    VariableDeclarator(false);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
midResultPW.print(lineNumber+",");
      VariableDeclarator(true);
    }
    jj_consume_token(SEMICOLON);
    Statement();
}

  final public void VariableDeclarator(boolean needLastType) throws ParseException, Exception {
    VariableDeclaratorId(needLastType);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
pwLine.append("=");
                staBit|=2;
                canPrint=false;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case LBRACKET:
      case MINUS:
      case STRING_LITERAL:{
        InitedValue();
pwLine.insert(0,0+":");
                midResultPW.println(pwLine.toString());
                staBit=0;
                pwLine=new StringBuilder();
        break;
        }
      case GET_CONN:
      case GET_STAT:
      case GET_PSTAT:
      case GET_CSTAT:
      case SQL:
      case PSQL:
      case CSQL:
      case TX:
      case VERIFY:
      case SLEEP:
      case IMPORT_DBI:
      case CLEAR_DBI:
      case IMPORT_IRS:
      case DEF_PROC:
      case CONTAIN:
      case ERROR:
      case INDEX_OF:
      case OLTPBENCH:
      case BENCHMARKSQL:
      case TPCH:
      case START_BENCHMARK:
      case END_BENCHMARK:
      case SYSBENCH_OLTP:
      case SYSBENCH_CPU:
      case SYSBENCH_IO:
      case SYSBENCH_MEM:
      case SYSBENCH_THREADS:
      case SYSBENCH_MUTEX:
      case MYSQL_TEST_FRAMEWORK:
      case TOUCHSTONE:
      case CPU:
      case MEM:
      case DISK:
      case NET:
      case FILE:
      case TABLE:
      case COLUMN:
      case IMPORT_TBL:
      case CLEAR_TBL:
      case PARALL:
      case MID_PARALL:
      case END_PARALL:
      case BATCH_SQL:
      case END_BATCH_SQL:
      case NMON:
      case INIT_DATABENCH_CONFIG:
      case START_DATABENCH:
      case CALCULATION:{
        FunctionStatement();
midResultPW.println(pwLine.toString());
                staBit=0;
                pwLine=new StringBuilder();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
if(canPrint)
                {
                        pwLine.insert(0,0+":");
                        midResultPW.println(pwLine.toString());
                        staBit=0;
                        pwLine=new StringBuilder();
                }
                canPrint=true;
}

// needLastType为true时，需要用lastType插入varTypeMap
  final public void VariableDeclaratorId(boolean needLastType) throws ParseException, Exception {Token varName=null;
    varName = jj_consume_token(IDENTIFIER);
var = varName.toString().trim();
        if(!varValueMap.containsKey(var) && !varTypeMap.containsKey(var))
        {
                varValueMap.put(var,null);
                if(needLastType)
                {
                        varTypeMap.put(var,lastType.trim());
                        pwLine.append(lastType.trim()+" ");
                }
                else
                {
                        varTypeMap.put(var,type.toString().trim());
                }
        }
        pwLine.append(var);
        if(type.length()!=0)
        {
                lastType = type.toString().trim();
        }
        type=new StringBuilder();
}

  final public void InitedValue() throws ParseException, Exception {Token varValue = null;
  boolean flag = true;
  boolean intEx = false;
  Token partString = null;
  StringBuilder leftString = new StringBuilder();
    if (jj_2_2(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        jj_consume_token(MINUS);
intEx = true;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      varValue = jj_consume_token(INTEGER_LITERAL);
if(intEx)
                        {
                                varValue.add(0,"-");
                        }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLOATING_POINT_LITERAL:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
intEx = true;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        varValue = jj_consume_token(FLOATING_POINT_LITERAL);
if(intEx)
                        {
                                varValue.add(0,"-");
                        }
        break;
        }
      case CHARACTER_LITERAL:{
        varValue = jj_consume_token(CHARACTER_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        varValue = jj_consume_token(STRING_LITERAL);
        label_3:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_3;
          }
          jj_consume_token(PLUS);
          partString = jj_consume_token(STRING_LITERAL);
leftString.append(partString.toString());
        }
        break;
        }
      case TRUE:{
        varValue = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        varValue = jj_consume_token(FALSE);
        break;
        }
      case NULL:{
        varValue = jj_consume_token(NULL);
        break;
        }
      case LBRACKET:{
        jj_consume_token(LBRACKET);
pwLine.append("[");
        InitedValue();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
pwLine.append(",");
          InitedValue();
        }
        jj_consume_token(RBRACKET);
isList=false;
                        varValueMap.put(var,listValue);
                        listValue = new ArrayList<Object>();
                        flag = false;

                        pwLine.append("]");
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if(isList)
                        {
                                listValue.add(varValue);
                                pwLine.append(varValue);
                        }
                        else
                        {
                                // 避免将List的值覆盖成null
                                if(flag)
                                {
                                        // multiple string
                                        if(leftString.length() != 0)
                                        {
                                                int startStringLength = varValue.toString().length();
                                                value = varValue.toString().substring(0, startStringLength-1) + leftString.toString().replaceAll("\"", "") + "\"";
                                                leftString.delete(0, leftString.length());
                                        }
                                        else
                                                value = varValue;
                                        // 避免条件表达式中的值覆盖某个变量原有的值
                                        if(staBit!=8)
                                        {
                                                varValueMap.put(var,value);
                                        }
                                        pwLine.append(value);
                                }
                        }
}

/* 条件表达式 */
  final public void Expression() throws ParseException, Exception {
staBit|=8;
    ConditionalExpression();
    if (jj_2_3(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
staBit=0;
}

  final public void AssignmentOperator() throws ParseException, Exception {Token aop=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      aop = jj_consume_token(ASSIGN);
      break;
      }
    case STARASSIGN:{
      aop = jj_consume_token(STARASSIGN);
      break;
      }
    case SLASHASSIGN:{
      aop = jj_consume_token(SLASHASSIGN);
      break;
      }
    case REMASSIGN:{
      aop = jj_consume_token(REMASSIGN);
      break;
      }
    case PLUSASSIGN:{
      aop = jj_consume_token(PLUSASSIGN);
      break;
      }
    case MINUSASSIGN:{
      aop = jj_consume_token(MINUSASSIGN);
      break;
      }
    case LSHIFTASSIGN:{
      aop = jj_consume_token(LSHIFTASSIGN);
      break;
      }
    case RSIGNEDSHIFTASSIGN:{
      aop = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
      }
    case RUNSIGNEDSHIFTASSIGN:{
      aop = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
      }
    case ANDASSIGN:{
      aop = jj_consume_token(ANDASSIGN);
      break;
      }
    case XORASSIGN:{
      aop = jj_consume_token(XORASSIGN);
      break;
      }
    case ORASSIGN:{
      aop = jj_consume_token(ORASSIGN);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
//pwLine.append(aop.toString());
                  // if表示式里不可以存在这些操作符，直接报错
                  {if (true) throw new Exception(String.format("forbiddent operator %s in line %d", aop.toString(), lineNumber));}
}

  final public void ConditionalExpression() throws ParseException, Exception {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HOOK:{
      jj_consume_token(HOOK);
pwLine.append("?");
      Expression();
      jj_consume_token(COLON);
pwLine.append(":");
      Expression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
}

  final public void ConditionalOrExpression() throws ParseException, Exception {
    ConditionalAndExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(SC_OR);
pwLine.append("||");
      ConditionalAndExpression();
    }
}

  final public void ConditionalAndExpression() throws ParseException, Exception {
    InclusiveOrExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(SC_AND);
pwLine.append("&&");
      InclusiveOrExpression();
    }
}

  final public void InclusiveOrExpression() throws ParseException, Exception {
    ExclusiveOrExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(BIT_OR);
pwLine.append("|");
      ExclusiveOrExpression();
    }
}

  final public void ExclusiveOrExpression() throws ParseException, Exception {
    AndExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      jj_consume_token(XOR);
pwLine.append("^");
      AndExpression();
    }
}

  final public void AndExpression() throws ParseException, Exception {
    EqualityExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(BIT_AND);
pwLine.append("&");
      EqualityExpression();
    }
}

  final public void EqualityExpression() throws ParseException, Exception {Token ex=null;
    InstanceOfExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        ex = jj_consume_token(EQ);
        break;
        }
      case NE:{
        ex = jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(ex.toString());
      InstanceOfExpression();
    }
}

  final public void InstanceOfExpression() throws ParseException, Exception {
    RelationalExpression();
}

  final public void RelationalExpression() throws ParseException, Exception {Token reex=null;
    ShiftExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        reex = jj_consume_token(LT);
        break;
        }
      case GT:{
        reex = jj_consume_token(GT);
        break;
        }
      case LE:{
        reex = jj_consume_token(LE);
        break;
        }
      case GE:{
        reex = jj_consume_token(GE);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(reex.toString());
      ShiftExpression();
    }
}

  final public void ShiftExpression() throws ParseException, Exception {
    AdditiveExpression();
}

  final public void AdditiveExpression() throws ParseException, Exception {Token addEx=null;
    MultiplicativeExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        addEx = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        addEx = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(addEx.toString());
      MultiplicativeExpression();
    }
}

  final public void MultiplicativeExpression() throws ParseException, Exception {Token mulEx=null;
    UnaryExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        mulEx = jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        mulEx = jj_consume_token(SLASH);
        break;
        }
      case REM:{
        mulEx = jj_consume_token(REM);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(mulEx.toString());
      UnaryExpression();
    }
}

  final public void UnaryExpression() throws ParseException, Exception {Token op=null;
        Token var=null;
    if (jj_2_4(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(op.toString());
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:
      case TILDE:{
        UnaryExpressionNotPlusMinus();
        break;
        }
      case IDENTIFIER:{
        var = jj_consume_token(IDENTIFIER);
pwLine.append(var.toString());
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case LBRACKET:
      case MINUS:
      case STRING_LITERAL:{
        InitedValue();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void UnaryExpressionNotPlusMinus() throws ParseException, Exception {Token op=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      op = jj_consume_token(TILDE);
      break;
      }
    case BANG:{
      op = jj_consume_token(BANG);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
pwLine.append(op.toString());
    UnaryExpression();
}

/* Statement语法 */
  final public 
void Statement() throws ParseException, Exception {
    if (jj_2_5(2)) {
      Block();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        EmptyStatement();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case DECIMAL:
      case CONNECTION:
      case STATEMENT:
      case PSTATEMENT:
      case CSTATEMENT:
      case LIST:
      case RESULTSET:
      case IDEALRESULTSET:
      case PERFORMANCERESULT:
      case TIMESTAMP:
      case SESSION:{
        VariableDeclaration();
        break;
        }
      case IDENTIFIER:{
        AssignValue();
        break;
        }
      case GET_CONN:
      case GET_STAT:
      case GET_PSTAT:
      case GET_CSTAT:
      case SQL:
      case PSQL:
      case CSQL:
      case TX:
      case VERIFY:
      case SLEEP:
      case IMPORT_DBI:
      case CLEAR_DBI:
      case IMPORT_IRS:
      case DEF_PROC:
      case CONTAIN:
      case ERROR:
      case INDEX_OF:
      case OLTPBENCH:
      case BENCHMARKSQL:
      case TPCH:
      case START_BENCHMARK:
      case END_BENCHMARK:
      case SYSBENCH_OLTP:
      case SYSBENCH_CPU:
      case SYSBENCH_IO:
      case SYSBENCH_MEM:
      case SYSBENCH_THREADS:
      case SYSBENCH_MUTEX:
      case MYSQL_TEST_FRAMEWORK:
      case TOUCHSTONE:
      case CPU:
      case MEM:
      case DISK:
      case NET:
      case FILE:
      case TABLE:
      case COLUMN:
      case IMPORT_TBL:
      case CLEAR_TBL:
      case PARALL:
      case MID_PARALL:
      case END_PARALL:
      case BATCH_SQL:
      case END_BATCH_SQL:
      case NMON:
      case INIT_DATABENCH_CONFIG:
      case START_DATABENCH:
      case CALCULATION:{
midResultPW.print(lineNumber+",");
        FunctionStatement();
        jj_consume_token(SEMICOLON);
midResultPW.println(pwLine.toString());
                        staBit=0;
                        pwLine=new StringBuilder();
        Statement();
        break;
        }
      case IF:{
        IfStatement();
        break;
        }
      case WHILE:{
        WhileStatement();
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      case RBRACE:{
        jj_consume_token(RBRACE);
midResultPW.println(lineNumber+",6:}");
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
midResultPW.println(lineNumber+",4:else{");
        Statement();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void Block() throws ParseException, Exception {
    jj_consume_token(LBRACE);
    BlockStatement();
    Statement();
}

  final public void BlockStatement() throws ParseException, Exception {
    if (jj_2_6(2147483647)) {
      VariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case GET_CONN:
      case GET_STAT:
      case GET_PSTAT:
      case GET_CSTAT:
      case SQL:
      case PSQL:
      case CSQL:
      case TX:
      case VERIFY:
      case SLEEP:
      case IMPORT_DBI:
      case CLEAR_DBI:
      case IMPORT_IRS:
      case DEF_PROC:
      case CONTAIN:
      case IF:
      case ELSE:
      case WHILE:
      case ERROR:
      case INDEX_OF:
      case OLTPBENCH:
      case BENCHMARKSQL:
      case TPCH:
      case START_BENCHMARK:
      case END_BENCHMARK:
      case SYSBENCH_OLTP:
      case SYSBENCH_CPU:
      case SYSBENCH_IO:
      case SYSBENCH_MEM:
      case SYSBENCH_THREADS:
      case SYSBENCH_MUTEX:
      case MYSQL_TEST_FRAMEWORK:
      case TOUCHSTONE:
      case CPU:
      case MEM:
      case DISK:
      case NET:
      case FILE:
      case TABLE:
      case COLUMN:
      case IMPORT_TBL:
      case CLEAR_TBL:
      case PARALL:
      case MID_PARALL:
      case END_PARALL:
      case BATCH_SQL:
      case END_BATCH_SQL:
      case NMON:
      case INIT_DATABENCH_CONFIG:
      case START_DATABENCH:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case DECIMAL:
      case CONNECTION:
      case STATEMENT:
      case PSTATEMENT:
      case CSTATEMENT:
      case LIST:
      case RESULTSET:
      case IDEALRESULTSET:
      case PERFORMANCERESULT:
      case TIMESTAMP:
      case SESSION:
      case CALCULATION:
      case LBRACE:
      case RBRACE:
      case SEMICOLON:
      case IDENTIFIER:{
        Statement();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

//给变量赋值的语句
  final public void AssignValue() throws ParseException, Exception {
midResultPW.print(lineNumber+",");
    VariableDeclaratorId(false);
    jj_consume_token(ASSIGN);
pwLine.append("=");
                        staBit|=2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GET_CONN:
    case GET_STAT:
    case GET_PSTAT:
    case GET_CSTAT:
    case SQL:
    case PSQL:
    case CSQL:
    case TX:
    case VERIFY:
    case SLEEP:
    case IMPORT_DBI:
    case CLEAR_DBI:
    case IMPORT_IRS:
    case DEF_PROC:
    case CONTAIN:
    case ERROR:
    case INDEX_OF:
    case OLTPBENCH:
    case BENCHMARKSQL:
    case TPCH:
    case START_BENCHMARK:
    case END_BENCHMARK:
    case SYSBENCH_OLTP:
    case SYSBENCH_CPU:
    case SYSBENCH_IO:
    case SYSBENCH_MEM:
    case SYSBENCH_THREADS:
    case SYSBENCH_MUTEX:
    case MYSQL_TEST_FRAMEWORK:
    case TOUCHSTONE:
    case CPU:
    case MEM:
    case DISK:
    case NET:
    case FILE:
    case TABLE:
    case COLUMN:
    case IMPORT_TBL:
    case CLEAR_TBL:
    case PARALL:
    case MID_PARALL:
    case END_PARALL:
    case BATCH_SQL:
    case END_BATCH_SQL:
    case NMON:
    case INIT_DATABENCH_CONFIG:
    case START_DATABENCH:
    case CALCULATION:{
      FunctionStatement();
midResultPW.println(pwLine.toString());
                        staBit=0;
                        pwLine=new StringBuilder();
      break;
      }
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case TRUE:
    case FALSE:
    case NULL:
    case LBRACKET:
    case MINUS:
    case STRING_LITERAL:{
      InitedValue();
pwLine.insert(0,0+":");
                        midResultPW.println(pwLine.toString());
                        staBit=0;
                        pwLine=new StringBuilder();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    Statement();
}

//功能性语句
  final public void FunctionStatement() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GET_CONN:{
      get_conn();
      break;
      }
    case GET_STAT:{
      get_stat();
      break;
      }
    case GET_PSTAT:{
      get_pstat();
      break;
      }
    case GET_CSTAT:{
      get_cstat();
      break;
      }
    case SQL:{
      sql();
      break;
      }
    case PSQL:{
      psql();
      break;
      }
    case CSQL:{
      csql();
      break;
      }
    case TX:{
      tx();
      break;
      }
    case VERIFY:{
      verify();
      break;
      }
    case SLEEP:{
      sleep();
      break;
      }
    case ERROR:{
      error();
      break;
      }
    case IMPORT_DBI:{
      import_dbi();
      break;
      }
    case CLEAR_DBI:{
      clear_dbi();
      break;
      }
    case IMPORT_IRS:{
      import_irs();
      break;
      }
    case DEF_PROC:{
      def_proc();
      break;
      }
    case CONTAIN:{
      contain();
      break;
      }
    case CALCULATION:{
      calculate();
      break;
      }
    case INDEX_OF:{
      index_of();
      break;
      }
    case TABLE:{
      table();
      break;
      }
    case COLUMN:{
      column();
      break;
      }
    case IMPORT_TBL:{
      import_tbl();
      break;
      }
    case CLEAR_TBL:{
      clear_tbl();
      break;
      }
    case PARALL:{
      parall();
      break;
      }
    case MID_PARALL:{
      mid_parall();
      break;
      }
    case END_PARALL:{
      end_parall();
      break;
      }
    case OLTPBENCH:{
      oltpbench();
      break;
      }
    case BENCHMARKSQL:{
      benchmarksql();
      break;
      }
    case SYSBENCH_OLTP:{
      sysbench_oltp();
      break;
      }
    case START_BENCHMARK:{
      start_benchmark();
      break;
      }
    case END_BENCHMARK:{
      end_benchmark();
      break;
      }
    case MYSQL_TEST_FRAMEWORK:{
      mysql_test_framework();
      break;
      }
    case SYSBENCH_CPU:{
      sysbench_cpu();
      break;
      }
    case SYSBENCH_IO:{
      sysbench_io();
      break;
      }
    case SYSBENCH_MEM:{
      sysbench_mem();
      break;
      }
    case SYSBENCH_THREADS:{
      sysbench_threads();
      break;
      }
    case SYSBENCH_MUTEX:{
      sysbench_mutex();
      break;
      }
    case TOUCHSTONE:{
      touchstone();
      break;
      }
    case CPU:{
      cpu();
      break;
      }
    case MEM:{
      mem();
      break;
      }
    case DISK:{
      disk();
      break;
      }
    case NET:{
      net();
      break;
      }
    case FILE:{
      file();
      break;
      }
    case TPCH:{
      tpch();
      break;
      }
    case BATCH_SQL:{
      batch_sql();
      break;
      }
    case END_BATCH_SQL:{
      end_batch_sql();
      break;
      }
    case NMON:{
      nmon();
      break;
      }
    case INIT_DATABENCH_CONFIG:{
      init_databench_config();
      break;
      }
    case START_DATABENCH:{
      start_databench();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
switch(staBit)
                        {
                                case 15:pwLine.insert(0,7+":");break;
                                case 31:pwLine.insert(0,8+":");break;
                                case 7: pwLine.insert(0,3+":");break;
                                case 3: pwLine.insert(0,2+":");break;
                                case 1: pwLine.insert(0,1+":");break;
                                default:break;
                        }
}

  final public void EmptyStatement() throws ParseException, Exception {
    jj_consume_token(SEMICOLON);
    Statement();
}

  final public void IfStatement() throws ParseException, Exception {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
midResultPW.print(lineNumber+",4:if[");
                        midResultPW.println(pwLine.toString()+"]{");
                        staBit=0;
                        pwLine=new StringBuilder();
    Statement();
    Statement();
}

  final public void WhileStatement() throws ParseException, Exception {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
midResultPW.print(lineNumber+",5:while[");
                  midResultPW.println(pwLine.toString()+"]{");
                  staBit=0;
                  pwLine=new StringBuilder();
    Statement();
    Statement();
}

//void WhileStatement() throws Exception:
//{
//	Token loopCount=null;
//}
//{
//	<WHILE> <LPAREN> loopCount= <INTEGER_LITERAL> <RPAREN>
//		{
//			midResultPW.println(lineNumber+",5:while["+loopCount.toString()+"]{");
//		}
//	Statement()
//	Statement()
//}






/*	关键字语句	*/
  final public 
void get_conn() throws ParseException {Token value=null;
    jj_consume_token(GET_CONN);
    jj_consume_token(LBRACKET);
    value = jj_consume_token(MS_CATEGORY);
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("get_conn["+value.toString()+"]");
}

  final public void get_stat() throws ParseException, Exception {Token conName=null;
    jj_consume_token(GET_STAT);
    jj_consume_token(LBRACKET);
    conName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("get_stat["+conName.toString()+"]");
                        if(varTypeMap.get(conName.toString())==null || !varTypeMap.get(conName.toString()).equals("Connection"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", conName));}
                        }
}

  final public void get_pstat() throws ParseException, Exception {Token conName =null;
        Token sql=null;
        Token dataType=null;
    jj_consume_token(GET_PSTAT);
    jj_consume_token(LBRACKET);
    conName = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    sql = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
staBit|=1;
                        pwLine.append("get_pstat["+conName.toString()+";"+sql.toString()+";");
                        if(varTypeMap.get(conName.toString())==null || !varTypeMap.get(conName.toString()).equals("Connection"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", conName));}
                        }
                        int length = sql.toString().length();
                        SQLUtils.parseStatements(sql.toString().substring(1, length-1), DbmsBrand.getBrand(brand.getBrand()));
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case DECIMAL:
      case TIMESTAMP:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        dataType = jj_consume_token(BOOLEAN);
        break;
        }
      case CHAR:{
        dataType = jj_consume_token(CHAR);
        break;
        }
      case BYTE:{
        dataType = jj_consume_token(BYTE);
        break;
        }
      case SHORT:{
        dataType = jj_consume_token(SHORT);
        break;
        }
      case INT:{
        dataType = jj_consume_token(INT);
        break;
        }
      case LONG:{
        dataType = jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        dataType = jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        dataType = jj_consume_token(DOUBLE);
        break;
        }
      case STRING:{
        dataType = jj_consume_token(STRING);
        break;
        }
      case DECIMAL:{
        dataType = jj_consume_token(DECIMAL);
        break;
        }
      case TIMESTAMP:{
        dataType = jj_consume_token(TIMESTAMP);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(dataType.toString());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
pwLine.append(",");
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void get_cstat() throws ParseException, Exception {Token conName=null;
        Token sql=null;
        Token dataType=null;
    jj_consume_token(GET_CSTAT);
    jj_consume_token(LBRACKET);
    conName = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    sql = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
staBit|=1;
                        pwLine.append("get_cstat["+conName.toString()+";"+sql.toString()+";");
                        if(varTypeMap.get(conName.toString())==null || !varTypeMap.get(conName.toString()).equals("Connection"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", conName));}
                        }
                        int length = sql.toString().length();
                        SQLUtils.parseStatements(sql.toString().substring(1, length-1), DbmsBrand.getBrand(brand.getBrand()));
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case DECIMAL:
      case TIMESTAMP:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        dataType = jj_consume_token(BOOLEAN);
        break;
        }
      case CHAR:{
        dataType = jj_consume_token(CHAR);
        break;
        }
      case BYTE:{
        dataType = jj_consume_token(BYTE);
        break;
        }
      case SHORT:{
        dataType = jj_consume_token(SHORT);
        break;
        }
      case INT:{
        dataType = jj_consume_token(INT);
        break;
        }
      case LONG:{
        dataType = jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        dataType = jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        dataType = jj_consume_token(DOUBLE);
        break;
        }
      case STRING:{
        dataType = jj_consume_token(STRING);
        break;
        }
      case DECIMAL:{
        dataType = jj_consume_token(DECIMAL);
        break;
        }
      case TIMESTAMP:{
        dataType = jj_consume_token(TIMESTAMP);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(dataType.toString());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
pwLine.append(",");
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sql() throws ParseException, Exception {Token sql=null;
        Token err_message=null;
        Token statName=null;
        Token sign=null;
        Token number=null;
    jj_consume_token(SQL);
    jj_consume_token(LBRACKET);
    sql = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
    statName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      sign = jj_consume_token(ERROR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        err_message = jj_consume_token(STRING_LITERAL);
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("sql["+sql.toString()+";"+statName.toString());
                        pwLine.append(sign == null ? "" : ";"+sign.toString());
                        pwLine.append(err_message == null ? "" : ";"+err_message.toString());
                        pwLine.append("]");
                        if(varTypeMap.get(statName.toString())==null || !varTypeMap.get(statName.toString()).equals("Statement"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", statName));}
                        }
//			int length = sql.toString().length();
//			SQLUtils.parseStatements(sql.toString().substring(1, length-1), DbmsBrand.getBrand(brand.getBrand()));

}

  final public Token parameter() throws ParseException, Exception {Token value = null;
        boolean intEx = false;
    if (jj_2_7(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        jj_consume_token(MINUS);
intEx = true;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      value = jj_consume_token(INTEGER_LITERAL);
if(intEx)
                        {
                                value.add(0,"-");
                        }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLOATING_POINT_LITERAL:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
intEx = true;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        value = jj_consume_token(FLOATING_POINT_LITERAL);
if(intEx)
                        {
                                value.add(0,"-");
                        }
        break;
        }
      case CHARACTER_LITERAL:{
        value = jj_consume_token(CHARACTER_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        value = jj_consume_token(STRING_LITERAL);
        break;
        }
      case TRUE:{
        value = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        value = jj_consume_token(FALSE);
        break;
        }
      case NULL:{
        value = jj_consume_token(NULL);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

  final public void psql() throws ParseException, Exception {Token pstatName=null;
        Token sign=null;
        Token err_message=null;
        Token variableName = null;
        Token value=null;
    jj_consume_token(PSQL);
    jj_consume_token(LBRACKET);
    pstatName = jj_consume_token(IDENTIFIER);
staBit|=1;
                        pwLine.append("psql["+pstatName.toString());

                        if(varTypeMap.get(pstatName.toString())==null || !varTypeMap.get(pstatName.toString()).equals("PStatement"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", pstatName));}
                        }
    if (jj_2_8(2)) {
      jj_consume_token(SEMICOLON);
pwLine.append(";");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variableName = jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case STRING_LITERAL:{
        value = parameter();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(variableName!=null)
                        {
                                pwLine.append(variableName.toString());
                                if(varTypeMap.get(variableName.toString()) == null)
                                {
                                        {if (true) throw new Exception(String.format("type of %s doesn't declared", variableName));}
                                }
                                variableName=null;
                        }
                        else if(value!=null)
                        {
                                pwLine.append(value.toString());
                                value = null;
                        }
    } else {
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variableName = jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case STRING_LITERAL:{
        value = parameter();
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(variableName!=null)
                        {
                                pwLine.append(","+variableName.toString());
                                if(varTypeMap.get(variableName.toString()) == null)
                                {
                                        {if (true) throw new Exception(String.format("type of %s doesn't declared", variableName));}
                                }
                                variableName=null;
                        }
                        else if(value!=null)
                        {
                                pwLine.append(","+value.toString());
                                value=null;
                        }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      sign = jj_consume_token(ERROR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        err_message = jj_consume_token(STRING_LITERAL);
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
pwLine.append(sign == null ? "" : ";"+sign.toString());
                        pwLine.append(err_message == null ? "" : ";"+err_message.toString());
                        pwLine.append("]");
}

  final public void csql() throws ParseException, Exception {Token cstatName=null;
        Token sign=null;
        Token number=null;
        Token variableName=null;
        Token value=null;
        Token proc_param_type=null;
    jj_consume_token(CSQL);
    jj_consume_token(LBRACKET);
    cstatName = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
staBit|=1;
                        pwLine.append("csql["+cstatName.toString()+";");

                        if(varTypeMap.get(cstatName.toString())==null || !varTypeMap.get(cstatName.toString()).equals("CStatement"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", cstatName));}
                        }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      sign = jj_consume_token(MINUS);
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    number = jj_consume_token(INTEGER_LITERAL);
pwLine.append(sign==null?number.toString():"-"+number.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case TRUE:
    case FALSE:
    case NULL:
    case MINUS:
    case IDENTIFIER:
    case STRING_LITERAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variableName = jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case STRING_LITERAL:{
        value = parameter();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      proc_param_type = jj_consume_token(PROCEDURE_PARAM_TYPE);
if(variableName!=null)
                        {
                                pwLine.append(variableName.toString());
                                if(varTypeMap.get(variableName.toString())==null)
                                {
                                        {if (true) throw new Exception(String.format("type of %s doesn't declared", variableName));}
                                }
                                variableName=null;
                        }
                        else if(value!=null)
                        {
                                pwLine.append(value.toString());
                                value=null;
                        }
                        pwLine.append(" ").append(proc_param_type.toString());
                        proc_param_type=null;
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        variableName = jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case STRING_LITERAL:{
        value = parameter();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      proc_param_type = jj_consume_token(PROCEDURE_PARAM_TYPE);
if(variableName!=null)
                        {
                                pwLine.append(",").append(variableName.toString());
                                if(varTypeMap.get(variableName.toString())==null)
                                {
                                        {if (true) throw new Exception(String.format("type of %s doesn't declared", variableName));}
                                }
                                variableName=null;
                        }
                        else if(value!=null)
                        {
                                pwLine.append(",").append(value.toString());
                                value=null;
                        }
                        pwLine.append(" ").append(proc_param_type.toString());
                        proc_param_type=null;
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void tx() throws ParseException, Exception {Token conName=null;
        Token op=null;
    jj_consume_token(TX);
    jj_consume_token(LBRACKET);
    conName = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    op = jj_consume_token(TX_OP);
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("tx["+conName.toString()+";"+op.toString()+"]");

                        if(varTypeMap.get(conName.toString())==null || !varTypeMap.get(conName.toString()).equals("Connection"))
                        {
                                {if (true) throw new Exception(String.format("type of %s doesn't match or declared", conName));}
                        }
}

// VERIFY关键字语法分析
  final public void verify() throws ParseException, Exception {Token var1 = null;
        Token var2 = null;
        Token operator = null;
        Token setType = null;
    jj_consume_token(VERIFY);
    jj_consume_token(LBRACKET);
    var1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      operator = jj_consume_token(EQ);
      break;
      }
    case NE:{
      operator = jj_consume_token(NE);
      break;
      }
    case GT:{
      operator = jj_consume_token(GT);
      break;
      }
    case LT:{
      operator = jj_consume_token(LT);
      break;
      }
    case GE:{
      operator = jj_consume_token(GE);
      break;
      }
    case LE:{
      operator = jj_consume_token(LE);
      break;
      }
    case CONTAINS:{
      operator = jj_consume_token(CONTAINS);
      break;
      }
    case ALL_ARE:{
      operator = jj_consume_token(ALL_ARE);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    var2 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      setType = jj_consume_token(SET_TYPE);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("verify["+var1+";");
                        pwLine.append(operator);
                        pwLine.append(";"+var2);
                        if (setType != null)
                                pwLine.append(";").append(setType);
                        pwLine.append("]");

                        if (varTypeMap.get(var1.toString()) == null)
                                {if (true) throw new Exception(String.format("type of %s doesn't declared", var1));}
                        if (varTypeMap.get(var2.toString()) == null)
                                {if (true) throw new Exception(String.format("type of %s doesn't declared", var2));}
}

  final public void sleep() throws ParseException {Token number=null;
        Token unit=null;
    jj_consume_token(SLEEP);
    jj_consume_token(LBRACKET);
    number = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(SEMICOLON);
    unit = jj_consume_token(TIME_UNIT);
    jj_consume_token(RBRACKET);
staBit|=1;
                        pwLine.append("sleep["+number+";"+unit+"]");
}

  final public void error() throws ParseException {
    jj_consume_token(ERROR);
staBit|=1;
                        pwLine.append("error");
}

  final public void import_dbi() throws ParseException, Exception {Token str=null;
    jj_consume_token(IMPORT_DBI);
    jj_consume_token(LBRACKET);
    str = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RBRACKET);
staBit|=1;
                        String fileName = str.toString();
                        if(fileName.endsWith(".dbi"))
                                fileName = fileName.substring(0,fileName.length()-4);
                        if(!new File(TestController.getDatabaseInstancePath()+TestController.getCurrentGroup()+"/"+fileName.substring(1,fileName.length()-1)+".dbi").exists())
                                {if (true) throw new Exception("file "+fileName.substring(1,fileName.length()-1)+".result doesn't exist in line "+lineNumber);}
                        pwLine.append("import_dbi["+fileName+"]");
}

  final public void clear_dbi() throws ParseException, Exception {Token str=null;
    jj_consume_token(CLEAR_DBI);
    jj_consume_token(LBRACKET);
    str = jj_consume_token(STRING_LITERAL);
    jj_consume_token(RBRACKET);
staBit|=1;
                        String fileName = str.toString();
                        if(fileName.endsWith(".dbi"))
                                fileName = fileName.substring(0,fileName.length()-4);
                        if(!new File(TestController.getDatabaseInstancePath()+TestController.getCurrentGroup()+"/"+fileName.substring(1,fileName.length()-1)+".dbi").exists())
                                {if (true) throw new Exception("file "+fileName.substring(1,fileName.length()-1)+".result doesn't exist in line "+lineNumber);}
                        pwLine.append("clear_dbi["+fileName+"]");
}

// position从0开始计数
  final public void import_irs() throws ParseException, Exception {Token source=null;
        Token var1=null;
        Token var2=null;
        Token position = null;
    jj_consume_token(IMPORT_IRS);
    jj_consume_token(LBRACKET);
    source = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
staBit|=1;
                        String fileName = source.toString();
                        if(fileName.endsWith(".result"))
                                fileName = fileName.substring(0,fileName.length()-7);
                        if(!new File(TestController.getIdealResultSetPath()+TestController.getCurrentGroup()+"/"+fileName.substring(1,fileName.length()-1)+".result").exists())
                                {if (true) throw new Exception("file "+fileName.substring(1,fileName.length()-1)+".result doesn't exist in line "+lineNumber);}

                        pwLine.append("import_irs["+fileName+"][");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      var1 = jj_consume_token(IDENTIFIER);
      position = jj_consume_token(INTEGER_LITERAL);
if(varTypeMap.get(var1.toString())==null || !varTypeMap.get(var1.toString()).startsWith("IdealResultSet"))
                                {if (true) throw new Exception("type of "+var1+" doesn't match or declared");}

                        pwLine.append(var1+" "+position);
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        var2 = jj_consume_token(IDENTIFIER);
        position = jj_consume_token(INTEGER_LITERAL);
if(varTypeMap.get(var2.toString())==null || !varTypeMap.get(var2.toString()).startsWith("IdealResultSet"))
                                {if (true) throw new Exception("type of "+var2+" doesn't match or declared");}

                        pwLine.append(","+var2+" "+position);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void def_proc() throws ParseException, Exception {Token str_var =null;
        Token stat_var = null;
    jj_consume_token(DEF_PROC);
    jj_consume_token(LBRACKET);
    str_var = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    stat_var = jj_consume_token(IDENTIFIER);
    jj_consume_token(RBRACKET);
if(varTypeMap.get(str_var.toString())==null || !varTypeMap.get(str_var.toString()).equals("String"))
                        {
                                {if (true) throw new Exception("type of "+str_var+" doesn't match or declared");}
                        }
                        if(varTypeMap.get(stat_var.toString())==null || !varTypeMap.get(stat_var.toString()).equals("Statement"))
                        {
                                {if (true) throw new Exception("type of "+stat_var+" doesn't match or declared");}
                        }

                        staBit|=1;
                        pwLine.append("def_proc[" + str_var.toString() + ";" + stat_var.toString() + "]");
}

  final public void contain() throws ParseException, Exception {Token explain_str=null;// MySQL explain得到的字符串
        Token pattern_str=null;// 匹配的字符串
        Token number=null;
    jj_consume_token(CONTAIN);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      explain_str = jj_consume_token(IDENTIFIER);
      break;
      }
    case STRING_LITERAL:{
      explain_str = jj_consume_token(STRING_LITERAL);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      pattern_str = jj_consume_token(IDENTIFIER);
      break;
      }
    case STRING_LITERAL:{
      pattern_str = jj_consume_token(STRING_LITERAL);
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      number = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case IDENTIFIER:{
      number = jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
if(!explain_str.toString().matches("\".*"))
                        {
                                //此时是变量，是否已声明或类型正确
                                if(!varTypeMap.containsKey(explain_str.toString()) || !varTypeMap.get(explain_str.toString()).equals("String"))
                                        {if (true) throw new Exception(explain_str.toString()+" hasn't been defined or it's data type is mismatch");}
                        }
                        if(!pattern_str.toString().matches("\".*"))
                        {
                                //此时是变量，是否已声明或类型正确
                                if(!varTypeMap.containsKey(pattern_str.toString()) || !varTypeMap.get(pattern_str.toString()).equals("String"))
                                        {if (true) throw new Exception(pattern_str.toString()+" hasn't been defined or it's data type is mismatch");}
                        }
                        if(!number.toString().matches("(\\p{Digit})+"))
                        {
                                //此时是变量，是否已声明或类型正确
                                if(!varTypeMap.containsKey(number.toString()) || (!varTypeMap.get(number.toString()).equals("int") && !varTypeMap.get(number.toString()).equals("long") && !varTypeMap.get(number.toString()).equals("float") && !varTypeMap.get(number.toString()).equals("double")))
                                {
                                        // System.out.println(varTypeMap.get(number.toString()));
                                        {if (true) throw new Exception(number.toString()+" hasn't been defined or it's data type is mismatch");}
                                }
                        }
                        staBit|=1;
                        pwLine.append("contain[").append(explain_str.toString()).append(";").append(pattern_str.toString()).append(";").append(number.toString()).append("]");
}

  final public void calculate() throws ParseException {Token exp=null;
    exp = jj_consume_token(CALCULATION);
staBit|=1;
                        pwLine.append(exp.toString());
}

  final public void index_of() throws ParseException, Exception {Token variable = null;
        Token row = null;
        Token column = null;
        Token dataType = null;
    jj_consume_token(INDEX_OF);
    jj_consume_token(LBRACKET);
    variable = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    row = jj_consume_token(INTEGER_LITERAL);
// the variable's data type must be List, IdealResultSet or ResultSet
                        if(!varTypeMap.get(variable.toString()).startsWith("List") && !varTypeMap.get(variable.toString()).equals("ResultSet") && !varTypeMap.get(variable.toString()).startsWith("IdealResultSet"))
                                {if (true) throw new Exception("the variable's data type must be List or IdealResultSet or ResultSet");}
                        staBit|=1;
                        pwLine.append("index_of[").append(variable.toString()).append(";").append(row.toString());
    if (jj_2_9(2)) {
      jj_consume_token(COMMA);
      column = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        dataType = jj_consume_token(BOOLEAN);
        break;
        }
      case CHAR:{
        dataType = jj_consume_token(CHAR);
        break;
        }
      case BYTE:{
        dataType = jj_consume_token(BYTE);
        break;
        }
      case SHORT:{
        dataType = jj_consume_token(SHORT);
        break;
        }
      case INT:{
        dataType = jj_consume_token(INT);
        break;
        }
      case LONG:{
        dataType = jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        dataType = jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        dataType = jj_consume_token(DOUBLE);
        break;
        }
      case STRING:{
        dataType = jj_consume_token(STRING);
        break;
        }
      case DECIMAL:{
        dataType = jj_consume_token(DECIMAL);
        break;
        }
      case TIMESTAMP:{
        dataType = jj_consume_token(TIMESTAMP);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(varTypeMap.get(variable.toString()).startsWith("List"))
                                {if (true) throw new Exception("the variable's data type must be IdealResultSet or ResultSet");}
                        pwLine.append(',').append(column.toString()).append(";").append(dataType.toString());
    } else {
      ;
    }
    jj_consume_token(RBRACKET);
pwLine.append(']');
}

/* sys关键字命令 */
  final public String sys_statement() throws ParseException {StringBuilder sys = new StringBuilder();
        Token option_part1 = null;
        Token option_part2 = null;
        Token option_part3 = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IS_CLUSTER_AVAILABLE:{
      option_part1 = jj_consume_token(IS_CLUSTER_AVAILABLE);
      break;
      }
    case AWAIT_AVAILABLE:{
      option_part1 = jj_consume_token(AWAIT_AVAILABLE);
      option_part2 = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case MERGE:{
      option_part1 = jj_consume_token(MERGE);
      break;
      }
    case IS_MERGE_DONE:{
      option_part1 = jj_consume_token(IS_MERGE_DONE);
      break;
      }
    case AWAIT_MERGE_DONE:{
      option_part1 = jj_consume_token(AWAIT_MERGE_DONE);
      option_part2 = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case REELECT:{
      option_part1 = jj_consume_token(REELECT);
      break;
      }
    case EXIST_MASTER:{
      option_part1 = jj_consume_token(EXIST_MASTER);
      break;
      }
    case KILL_SERVER:{
      option_part1 = jj_consume_token(KILL_SERVER);
      option_part2 = jj_consume_token(SERVER_OPTION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        option_part3 = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      break;
      }
    case START_SERVER:{
      option_part1 = jj_consume_token(START_SERVER);
      option_part2 = jj_consume_token(IDENTIFIER);
      break;
      }
    case ADD_SERVER:{
      option_part1 = jj_consume_token(ADD_SERVER);
      option_part2 = jj_consume_token(SERVER_OPTION);
      option_part3 = jj_consume_token(IP_ADDRESS);
      break;
      }
    case SET_MASTER:{
      option_part1 = jj_consume_token(SET_MASTER);
      option_part2 = jj_consume_token(IDENTIFIER);
      break;
      }
    case GATHER_STATISTICS:{
      option_part1 = jj_consume_token(GATHER_STATISTICS);
      break;
      }
    case IS_GATHER_DONE:{
      option_part1 = jj_consume_token(IS_GATHER_DONE);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sys.append(option_part1);
                        if (option_part2 != null)
                                sys.append(' ').append(option_part2);
                        if (option_part3 != null)
                                sys.append(' ').append(option_part3);
                        {if ("" != null) return sys.toString();}
    throw new Error("Missing return statement in function");
}

/*
* 压测模块解析
*/
  final public 
void table() throws ParseException {Token tbl_name=null;
        Token tbl_size=null;
        Token col_name=null;
        Token col_type=null;
        Token arg=null;
        Token auto_increment=null;
        Token ref_tbl_name=null;
        Token ref_col_name=null;
        boolean index_varchar=false;
        boolean index=false;
        Token num1=null;
        Token num2=null;
    jj_consume_token(TABLE);
    jj_consume_token(LBRACKET);
    tbl_name = jj_consume_token(IDENTIFIER);
staBit|=15;
                pwLine.append("table["+tbl_name.toString());
    jj_consume_token(SEMICOLON);
    tbl_size = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";"+tbl_size.toString());
    jj_consume_token(SEMICOLON);
    col_name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      col_type = jj_consume_token(BOOLEAN);
      break;
      }
    case CHAR:{
      col_type = jj_consume_token(CHAR);
      break;
      }
    case BYTE:{
      col_type = jj_consume_token(BYTE);
      break;
      }
    case SHORT:{
      col_type = jj_consume_token(SHORT);
      break;
      }
    case INT:{
      col_type = jj_consume_token(INT);
      break;
      }
    case LONG:{
      col_type = jj_consume_token(LONG);
      break;
      }
    case FLOAT:{
      col_type = jj_consume_token(FLOAT);
      break;
      }
    case DOUBLE:{
      col_type = jj_consume_token(DOUBLE);
      break;
      }
    case VARCHAR:{
      col_type = jj_consume_token(VARCHAR);
      jj_consume_token(LPAREN);
      arg = jj_consume_token(INTEGER_LITERAL);
index_varchar = true;
      jj_consume_token(RPAREN);
      break;
      }
    case DECIMAL:{
      col_type = jj_consume_token(DECIMAL);
      jj_consume_token(LPAREN);
      num1 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
index = true;
      num2 = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
      }
    case TIMESTAMP:{
      col_type = jj_consume_token(TIMESTAMP);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
pwLine.append(";"+col_name.toString()+" "+col_type.toString());
                if(index)
                {
                  pwLine.append("("+num1.toString()+":"+num2.toString()+")");
                        index=false;
                }
                if(index_varchar)
                {
                  pwLine.append("("+arg.toString()+")");
                  index_varchar=false;
                }
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      col_name = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        col_type = jj_consume_token(BOOLEAN);
        break;
        }
      case CHAR:{
        col_type = jj_consume_token(CHAR);
        break;
        }
      case BYTE:{
        col_type = jj_consume_token(BYTE);
        break;
        }
      case SHORT:{
        col_type = jj_consume_token(SHORT);
        break;
        }
      case INT:{
        col_type = jj_consume_token(INT);
        break;
        }
      case LONG:{
        col_type = jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        col_type = jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        col_type = jj_consume_token(DOUBLE);
        break;
        }
      case VARCHAR:{
        col_type = jj_consume_token(VARCHAR);
        jj_consume_token(LPAREN);
        arg = jj_consume_token(INTEGER_LITERAL);
index_varchar = true;
        jj_consume_token(RPAREN);
        break;
        }
      case DECIMAL:{
        col_type = jj_consume_token(DECIMAL);
        jj_consume_token(LPAREN);
        num1 = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(COMMA);
index = true;
        num2 = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(RPAREN);
        break;
        }
      case TIMESTAMP:{
        col_type = jj_consume_token(TIMESTAMP);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(","+col_name.toString()+" "+col_type.toString());
                        if(index)
                        {
                                pwLine.append("("+num1.toString()+":"+num2.toString()+")");
                                index=false;
                        }
                        if(index_varchar)
                        {
                                pwLine.append("("+arg.toString()+")");
                                index_varchar=false;
                        }
    }
    jj_consume_token(SEMICOLON);
    jj_consume_token(PK);
    jj_consume_token(LPAREN);
    col_name = jj_consume_token(IDENTIFIER);
pwLine.append(";pk("+col_name.toString());
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        break label_20;
      }
      col_name = jj_consume_token(IDENTIFIER);
pwLine.append(" "+col_name.toString());
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      auto_increment = jj_consume_token(IDENTIFIER);
pwLine.append(","+auto_increment.toString());
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
pwLine.append(")");
    if (jj_2_10(2)) {
      jj_consume_token(SEMICOLON);
      jj_consume_token(FK);
      jj_consume_token(LPAREN);
      col_name = jj_consume_token(IDENTIFIER);
      jj_consume_token(COMMA);
      ref_tbl_name = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
      ref_col_name = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
pwLine.append(";fk(");
                        pwLine.append(col_name.toString());
                        pwLine.append(","+ref_tbl_name.toString()+"."+ref_col_name.toString());
                        pwLine.append(")");
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        jj_consume_token(FK);
        jj_consume_token(LPAREN);
        col_name = jj_consume_token(IDENTIFIER);
        jj_consume_token(COMMA);
        ref_tbl_name = jj_consume_token(IDENTIFIER);
        jj_consume_token(DOT);
        ref_col_name = jj_consume_token(IDENTIFIER);
        jj_consume_token(RPAREN);
pwLine.append(",fk(");
                                pwLine.append(col_name.toString());
                                pwLine.append(","+ref_tbl_name.toString()+"."+ref_col_name.toString());
                                pwLine.append(")");
      }
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      jj_consume_token(INDEX);
      jj_consume_token(LPAREN);
      col_name = jj_consume_token(IDENTIFIER);
pwLine.append(";index("+col_name.toString());
      label_22:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(COMMA);
        col_name = jj_consume_token(IDENTIFIER);
pwLine.append(","+col_name.toString());
      }
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        jj_consume_token(INDEX);
        jj_consume_token(LPAREN);
        col_name = jj_consume_token(IDENTIFIER);
pwLine.append(";index("+col_name.toString());
        label_24:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_24;
          }
          jj_consume_token(COMMA);
          col_name = jj_consume_token(IDENTIFIER);
pwLine.append(","+col_name.toString());
        }
      }
      jj_consume_token(RPAREN);
pwLine.append(")");
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void column() throws ParseException {Token tbl_name=null;
        Token col_name=null;
        Token null_ratio=null;
        Token num=null;
        Token min=null;
        Token max=null;
    jj_consume_token(COLUMN);
    jj_consume_token(LBRACKET);
    tbl_name = jj_consume_token(IDENTIFIER);
staBit|=15;
                pwLine.append("column["+tbl_name.toString());
    jj_consume_token(SEMICOLON);
    col_name = jj_consume_token(IDENTIFIER);
pwLine.append(";"+col_name.toString());
    jj_consume_token(SEMICOLON);
    null_ratio = jj_consume_token(FLOATING_POINT_LITERAL);
pwLine.append(";"+null_ratio.toString());
    jj_consume_token(SEMICOLON);
    num = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(SEMICOLON);
    min = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(SEMICOLON);
    max = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";"+num.toString()+";"+min.toString()+";"+max.toString()+"]");
}

  final public void import_tbl() throws ParseException {Token tbl_name=null;
    jj_consume_token(IMPORT_TBL);
    jj_consume_token(LBRACKET);
    tbl_name = jj_consume_token(IDENTIFIER);
staBit|=15;
                pwLine.append("import_tbl["+tbl_name.toString());
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        break label_25;
      }
      jj_consume_token(SEMICOLON);
      tbl_name = jj_consume_token(IDENTIFIER);
pwLine.append(";"+tbl_name.toString());
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void clear_tbl() throws ParseException {Token tbl_name=null;
    jj_consume_token(CLEAR_TBL);
    jj_consume_token(LBRACKET);
    tbl_name = jj_consume_token(IDENTIFIER);
staBit|=15;
                pwLine.append("clear_tbl["+tbl_name.toString());
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        break label_26;
      }
      jj_consume_token(SEMICOLON);
      tbl_name = jj_consume_token(IDENTIFIER);
pwLine.append(";"+tbl_name.toString());
    }
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void parall() throws ParseException {
    jj_consume_token(PARALL);
staBit|=1;
                pwLine.append("parall");
}

  final public void mid_parall() throws ParseException {
    jj_consume_token(MID_PARALL);
staBit|=1;
                pwLine.append("mid_parall");
}

  final public void end_parall() throws ParseException {
    jj_consume_token(END_PARALL);
staBit|=1;
                pwLine.append("end_parall");
}

  final public void mysql_test_framework() throws ParseException {Token dbname=null;
  Token case_name=null;
  Token round=null;
    jj_consume_token(MYSQL_TEST_FRAMEWORK);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("mysql_test_framework[");
    dbname = jj_consume_token(STRING_LITERAL);
    jj_consume_token(SEMICOLON);
pwLine.append(dbname.toString());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      case_name = jj_consume_token(STRING_LITERAL);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
if (case_name != null) {
            pwLine.append(";").append(case_name.toString());
        }
    round = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";").append(round.toString()).append("]");
}

  final public void tpch() throws ParseException {Token size=null;
    Token round=null;
    jj_consume_token(TPCH);
    jj_consume_token(LBRACKET);
    size = jj_consume_token(FLOATING_POINT_LITERAL);
staBit |= 1;
        pwLine.append("tpch[").append(size.toString());
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";").append(round.toString()).append("]");
}

  final public void nmon() throws ParseException {Token host=null;
    Token user=null;
        Token interval=null;
        Token times=null;
    jj_consume_token(NMON);
    jj_consume_token(LBRACKET);
    host = jj_consume_token(IP_ADDRESS);
staBit |= 1;
        pwLine.append("nmon[").append(host.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";").append(user.toString());
    jj_consume_token(SEMICOLON);
    interval = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(interval.toString());
    jj_consume_token(SEMICOLON);
    times = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";").append(times.toString()).append("]");
}

  final public void oltpbench() throws ParseException {Token bench=null;
        Token isolation=null;
        Token scalefactor=null;
    Token loaderThreads=null;
        Token terminal=null;
        Token time = null;
        Token rate = null;
        Token create=null;
        Token load=null;
        Token execute=null;
        Token sampling_window=null;
        Token outputfile=null;
        Token round=null;
    jj_consume_token(OLTPBENCH);
    jj_consume_token(LBRACKET);
    bench = jj_consume_token(OLTPBENCH_B);
staBit|=1;
            pwLine.append("oltpbench[").append(bench.toString());
    jj_consume_token(SEMICOLON);
    isolation = jj_consume_token(BENCHMARK_ISOLATION);
pwLine.append(";");
            pwLine.append(isolation.toString());
    jj_consume_token(SEMICOLON);
    scalefactor = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(scalefactor.toString());
    jj_consume_token(SEMICOLON);
    loaderThreads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(loaderThreads.toString());
    jj_consume_token(SEMICOLON);
    terminal = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(terminal.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      rate = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case UNLIMITED:{
      rate = jj_consume_token(UNLIMITED);
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
pwLine.append(";");
        pwLine.append(rate.toString());
    jj_consume_token(SEMICOLON);
    create = jj_consume_token(BENCHMARK_BOOLEAN);
pwLine.append(";");
            pwLine.append(create.toString());
    jj_consume_token(SEMICOLON);
    load = jj_consume_token(BENCHMARK_BOOLEAN);
pwLine.append(";");
            pwLine.append(load.toString());
    jj_consume_token(SEMICOLON);
    execute = jj_consume_token(BENCHMARK_BOOLEAN);
pwLine.append(";");
            pwLine.append(execute.toString());
    jj_consume_token(SEMICOLON);
    sampling_window = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
            pwLine.append(sampling_window.toString());
    jj_consume_token(SEMICOLON);
    outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(";");
                pwLine.append(outputfile.toString());
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
                pwLine.append(round.toString());
                pwLine.append("]");
}

  final public void benchmarksql() throws ParseException {Token warehouses=null;
  Token loadWorkers=null;
  Token terminals=null;
  Token runTxnsPerTerminal=null;
  Token runMins=null;
  Token limitTxnsPerMin=null;
  Token round=null;
    jj_consume_token(BENCHMARKSQL);
    jj_consume_token(LBRACKET);
    warehouses = jj_consume_token(INTEGER_LITERAL);
staBit|=1;
            pwLine.append("benchmarksql[").append(warehouses.toString());
    jj_consume_token(SEMICOLON);
    loadWorkers = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(loadWorkers.toString());
    jj_consume_token(SEMICOLON);
    terminals = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
      pwLine.append(terminals.toString());
    jj_consume_token(SEMICOLON);
    runTxnsPerTerminal = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(runTxnsPerTerminal.toString());
    jj_consume_token(SEMICOLON);
    runMins = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
      pwLine.append(runMins.toString());
    jj_consume_token(SEMICOLON);
    limitTxnsPerMin = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(limitTxnsPerMin.toString());
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
         pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

/* benchmark模块 */
  final public void start_benchmark() throws ParseException, Exception {Token host = null;
    Token port = null;
    Token user = null;
    jj_consume_token(START_BENCHMARK);
    jj_consume_token(LBRACKET);
    host = jj_consume_token(IP_ADDRESS);
staBit |= 1;
        pwLine.append("start_benchmark[").append(host.toString());
    jj_consume_token(SEMICOLON);
    port = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(port.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(user.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void end_benchmark() throws ParseException, Exception {Token sessionName = null;
    jj_consume_token(END_BENCHMARK);
    jj_consume_token(LBRACKET);
    sessionName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RBRACKET);
staBit|=1;
        pwLine.append("end_benchmark["+sessionName.toString()+"]");
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
}

  final public void sysbench_oltp() throws ParseException, Exception {Token sessionName = null;
    Token option = null;
    Token database_type = null;
    Token test = null;
    Token host = null;
    Token port = null;
    Token usr = null;
    Token password = null;
    Token database = null;
    Token tables = null;
    Token table_size = null;
    Token threads = null;
    Token events = null;
    Token time = null;
    Token report_interval = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_OLTP);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_oltp[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    option = jj_consume_token(SYSBENCH_OPTION);
pwLine.append(";");
        pwLine.append(option.toString());
    jj_consume_token(SEMICOLON);
    database_type = jj_consume_token(BENCHMARK_DATABASE);
pwLine.append(";");
        pwLine.append(database_type.toString());
    jj_consume_token(SEMICOLON);
    test = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(test.toString());
    jj_consume_token(SEMICOLON);
    database = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(database.toString());
    jj_consume_token(SEMICOLON);
    host = jj_consume_token(IP_ADDRESS);
pwLine.append(";");
        pwLine.append(host.toString());
    jj_consume_token(SEMICOLON);
    port = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(port.toString());
    jj_consume_token(SEMICOLON);
    usr = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(usr.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        password = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case IDENTIFIER:{
        password = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
pwLine.append(password.toString());
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    tables = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(tables.toString());
    jj_consume_token(SEMICOLON);
    table_size = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(table_size.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    report_interval = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(report_interval.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sysbench_cpu() throws ParseException, Exception {Token sessionName = null;
    Token prime = null;
    Token threads = null;
    Token time = null;
    Token events = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_CPU);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_cpu[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    prime = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(prime.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sysbench_io() throws ParseException, Exception {Token sessionName = null;
    Token threads = null;
    Token time = null;
    Token events = null;
    Token file_num = null;
    Token file_block_size = null;
    Token file_total_size = null;
    Token file_test_mode = null;
    Token file_io_mode = null;
    Token file_async_backlog = null;
    Token file_fsync_freq = null;
    Token file_fsync_all = null;
    Token file_fsync_end = null;
    Token file_fsync_mode = null;
    Token file_merged_requests = null;
    Token file_rw_ratio = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_IO);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_io[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    file_num = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(file_num.toString());
    jj_consume_token(SEMICOLON);
    file_block_size = jj_consume_token(SIZE);
pwLine.append(";");
        pwLine.append(file_block_size.toString());
    jj_consume_token(SEMICOLON);
    file_total_size = jj_consume_token(SIZE);
pwLine.append(";");
        pwLine.append(file_total_size.toString());
    jj_consume_token(SEMICOLON);
    file_test_mode = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(file_test_mode.toString());
    jj_consume_token(SEMICOLON);
    file_io_mode = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(file_io_mode.toString());
    jj_consume_token(SEMICOLON);
    file_async_backlog = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(file_async_backlog.toString());
    jj_consume_token(SEMICOLON);
    file_fsync_freq = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(file_fsync_freq.toString());
    jj_consume_token(SEMICOLON);
    file_fsync_all = jj_consume_token(ON_OFF);
pwLine.append(";");
        pwLine.append(file_fsync_all.toString());
    jj_consume_token(SEMICOLON);
    file_fsync_end = jj_consume_token(ON_OFF);
pwLine.append(";");
        pwLine.append(file_fsync_end.toString());
    jj_consume_token(SEMICOLON);
    file_fsync_mode = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(file_fsync_mode.toString());
    jj_consume_token(SEMICOLON);
    file_merged_requests = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(file_merged_requests.toString());
    jj_consume_token(SEMICOLON);
    file_rw_ratio = jj_consume_token(FLOATING_POINT_LITERAL);
pwLine.append(";");
        pwLine.append(file_rw_ratio.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sysbench_mem() throws ParseException, Exception {Token sessionName = null;
    Token memory_block_size = null;
    Token memory_total_size = null;
    Token memory_scope = null;
    Token memory_hugetlb = null;
    Token memory_oper = null;
    Token memory_access_mode = null;
    Token threads = null;
    Token time = null;
    Token events = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_MEM);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_mem[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    memory_block_size = jj_consume_token(SIZE);
pwLine.append(";");
        pwLine.append(memory_block_size.toString());
    jj_consume_token(SEMICOLON);
    memory_total_size = jj_consume_token(SIZE);
pwLine.append(";");
        pwLine.append(memory_total_size.toString());
    jj_consume_token(SEMICOLON);
    memory_scope = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(memory_scope.toString());
    jj_consume_token(SEMICOLON);
    memory_hugetlb = jj_consume_token(ON_OFF);
pwLine.append(";");
        pwLine.append(memory_hugetlb.toString());
    jj_consume_token(SEMICOLON);
    memory_oper = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(memory_oper.toString());
    jj_consume_token(SEMICOLON);
    memory_access_mode = jj_consume_token(IDENTIFIER);
pwLine.append(";");
        pwLine.append(memory_access_mode.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sysbench_threads() throws ParseException, Exception {Token sessionName = null;
    Token thread_yields = null;
    Token thread_locks = null;
    Token threads = null;
    Token time = null;
    Token events = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_THREADS);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_threads[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    thread_yields = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(thread_yields.toString());
    jj_consume_token(SEMICOLON);
    thread_locks = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(thread_locks.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void sysbench_mutex() throws ParseException, Exception {Token sessionName = null;
    Token mutex_num = null;
    Token mutex_locks = null;
    Token mutex_loops = null;
    Token threads = null;
    Token time = null;
    Token events = null;
    Token outputfile = null;
    Token round = null;
    jj_consume_token(SYSBENCH_MUTEX);
    jj_consume_token(LBRACKET);
staBit |= 1;
        pwLine.append("sysbench_mutex[");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      sessionName = jj_consume_token(IDENTIFIER);
pwLine.append(sessionName.toString());
        if(varTypeMap.get(sessionName.toString())==null || !varTypeMap.get(sessionName.toString()).equals("Session"))
        {
            {if (true) throw new Exception(String.format("type of %s doesn't match or declared", sessionName));}
        }
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    mutex_num = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(mutex_num.toString());
    jj_consume_token(SEMICOLON);
    mutex_locks = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(mutex_locks.toString());
    jj_consume_token(SEMICOLON);
    mutex_loops = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(mutex_loops.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(threads.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(time.toString());
    jj_consume_token(SEMICOLON);
    events = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(events.toString());
    jj_consume_token(SEMICOLON);
pwLine.append(";");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      outputfile = jj_consume_token(IDENTIFIER);
pwLine.append(outputfile.toString());
      break;
      }
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
        pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void touchstone() throws ParseException {Token config=null;
  Token round=null;
    jj_consume_token(TOUCHSTONE);
    jj_consume_token(LBRACKET);
    config = jj_consume_token(TOUCHSTONE_C);
staBit|=1;
            pwLine.append("touchstone[").append(config.toString());
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
      pwLine.append(round.toString());
    jj_consume_token(RBRACKET);
pwLine.append("]");
}

  final public void cpu() throws ParseException {Token ip=null;
  Token user=null;
  Token cores=null;
  Token time=null;
    jj_consume_token(CPU);
    jj_consume_token(LBRACKET);
    ip = jj_consume_token(IP_ADDRESS);
staBit|=1;
    pwLine.append("cpu[").append(ip.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";");
      pwLine.append(user.toString());
    jj_consume_token(SEMICOLON);
    cores = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(cores.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
    pwLine.append(time.toString());
    pwLine.append("]");
}

  final public void mem() throws ParseException {Token ip=null;
  Token user=null;
  Token size=null;
  Token time=null;
    jj_consume_token(MEM);
    jj_consume_token(LBRACKET);
    ip = jj_consume_token(IP_ADDRESS);
staBit|=1;
    pwLine.append("mem[").append(ip.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";");
    pwLine.append(user.toString());
    jj_consume_token(SEMICOLON);
    size = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(size.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
    pwLine.append(time.toString());
    pwLine.append("]");
}

  final public void disk() throws ParseException {Token ip=null;
  Token user=null;
  Token IOPS=null;
  Token size=null;
  Token time=null;
    jj_consume_token(DISK);
    jj_consume_token(LBRACKET);
    ip = jj_consume_token(IP_ADDRESS);
staBit|=1;
    pwLine.append("disk[").append(ip.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";");
    pwLine.append(user.toString());
    jj_consume_token(SEMICOLON);
    IOPS = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(IOPS.toString());
    jj_consume_token(SEMICOLON);
    size = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(size.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
    pwLine.append(time.toString());
    pwLine.append("]");
}

  final public void net() throws ParseException {Token ip1=null;
  Token user1=null;
  Token IOPS=null;
  Token size=null;
  Token ip2=null;
  Token user2=null;
  Token time=null;
    jj_consume_token(NET);
    jj_consume_token(LBRACKET);
    ip1 = jj_consume_token(IP_ADDRESS);
staBit|=1;
    pwLine.append("net[").append(ip1.toString());
    jj_consume_token(SEMICOLON);
    user1 = jj_consume_token(IDENTIFIER);
pwLine.append(";");
    pwLine.append(user1.toString());
    jj_consume_token(SEMICOLON);
    IOPS = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(IOPS.toString());
    jj_consume_token(SEMICOLON);
    size = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";");
    pwLine.append(size.toString());
    jj_consume_token(SEMICOLON);
    ip2 = jj_consume_token(IP_ADDRESS);
pwLine.append(";");
     pwLine.append(ip2.toString());
    jj_consume_token(SEMICOLON);
    user2 = jj_consume_token(IDENTIFIER);
pwLine.append(";");
    pwLine.append(user2.toString());
    jj_consume_token(SEMICOLON);
    time = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
    pwLine.append(time.toString());
    pwLine.append("]");
}

  final public void file() throws ParseException {Token ip=null;
  Token user=null;
  Token path=null;
    jj_consume_token(FILE);
    jj_consume_token(LBRACKET);
    ip = jj_consume_token(IP_ADDRESS);
staBit|=1;
    pwLine.append("file[").append(ip.toString());
    jj_consume_token(SEMICOLON);
    user = jj_consume_token(IDENTIFIER);
pwLine.append(";");
      pwLine.append(user.toString());
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      path = jj_consume_token(IDENTIFIER);
      break;
      }
    case FILE_PATH:{
      path = jj_consume_token(FILE_PATH);
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
pwLine.append(";");
    pwLine.append(path.toString());
    pwLine.append("]");
}

  final public void batch_sql() throws ParseException {Token time = null;
    Token threads = null;
    jj_consume_token(BATCH_SQL);
    jj_consume_token(LBRACKET);
    time = jj_consume_token(INTEGER_LITERAL);
staBit|=1;
        pwLine.append("batch_sql["+time.toString());
    jj_consume_token(SEMICOLON);
    threads = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";").append(threads.toString()).append("]");
}

  final public void end_batch_sql() throws ParseException {
    jj_consume_token(END_BATCH_SQL);
staBit|=1;
                pwLine.append("end_batch_sql");
}

  final public void init_databench_config() throws ParseException {Token businesstest_initSize = null;
    Token businesstest_minSize = null;
    Token businesstest_maxSize = null;
    Token local_initSize = null;
    Token local_minSize = null;
    Token local_maxSize = null;
    jj_consume_token(INIT_DATABENCH_CONFIG);
    jj_consume_token(LBRACKET);
    businesstest_initSize = jj_consume_token(INTEGER_LITERAL);
staBit|=1;
        pwLine.append("init_databench_config["+businesstest_initSize.toString());
    jj_consume_token(SEMICOLON);
    businesstest_minSize = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(businesstest_minSize.toString());
    jj_consume_token(SEMICOLON);
    businesstest_maxSize = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(businesstest_maxSize.toString());
    jj_consume_token(SEMICOLON);
    local_initSize = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(local_initSize.toString());
    jj_consume_token(SEMICOLON);
    local_minSize = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(local_minSize.toString());
    jj_consume_token(SEMICOLON);
    local_maxSize = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";").append(local_maxSize.toString()).append("]");
}

  final public void start_databench() throws ParseException {Token datacfg_id = null;
    Token trancfg_id = null;
    Token isolation_level = null;
    Token round = null;
    jj_consume_token(START_DATABENCH);
    jj_consume_token(LBRACKET);
    datacfg_id = jj_consume_token(INTEGER_LITERAL);
staBit|=1;
        pwLine.append("start_databench[" + datacfg_id.toString());
    jj_consume_token(SEMICOLON);
    trancfg_id = jj_consume_token(INTEGER_LITERAL);
pwLine.append(";").append(trancfg_id.toString());
    jj_consume_token(SEMICOLON);
    isolation_level = jj_consume_token(DATABENCH_ISOLATION_LEVEL);
pwLine.append(";").append(isolation_level.toString());
    jj_consume_token(SEMICOLON);
    round = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
pwLine.append(";");
        pwLine.append(round.toString());
        pwLine.append("]");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_UnaryExpression_1521_9_36()
 {
    if (jj_3R_UnaryExpressionNotPlusMinus_1533_9_45()) return true;
    return false;
  }

  private boolean jj_3R_disk_3438_3_167()
 {
    if (jj_scan_token(DISK)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1516_9_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1521_9_36()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1523_9_37()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1525_9_38()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) return true;
    }
    if (jj_3R_UnaryExpression_1516_9_30()) return true;
    return false;
  }

  private boolean jj_3R_BasicDataType_1127_9_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_1505_9_180()
 {
    if (jj_3R_UnaryExpression_1516_9_30()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_3R_psql_1883_39_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_AdditiveExpression_1492_9_179()
 {
    if (jj_3R_MultiplicativeExpression_1505_9_180()) return true;
    return false;
  }

  private boolean jj_3R_DataType_1108_9_42()
 {
    if (jj_3R_IdealResultSet_DataType_1177_9_51()) return true;
    return false;
  }

  private boolean jj_3R_DataType_1104_9_41()
 {
    if (jj_3R_List_DataType_1160_9_50()) return true;
    return false;
  }

  private boolean jj_3R_psql_1870_9_133()
 {
    if (jj_scan_token(PSQL)) return true;
    return false;
  }

  private boolean jj_3R_mem_3406_3_166()
 {
    if (jj_scan_token(MEM)) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_1484_9_178()
 {
    if (jj_3R_AdditiveExpression_1492_9_179()) return true;
    return false;
  }

  private boolean jj_3R_DataType_1092_9_40()
 {
    if (jj_3R_BasicDataType_1127_9_49()) return true;
    return false;
  }

  private boolean jj_3R_DataType_1091_9_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DataType_1092_9_40()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_DataType_1104_9_41()) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_3R_DataType_1108_9_42()) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_RelationalExpression_1473_9_177()
 {
    if (jj_3R_ShiftExpression_1484_9_178()) return true;
    return false;
  }

  private boolean jj_3R_InstanceOfExpression_1465_9_176()
 {
    if (jj_3R_RelationalExpression_1473_9_177()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_parameter_1840_10_60()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_parameter_1840_9_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parameter_1840_10_60()) jj_scanpos = xsp;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_oltpbench_2604_9_153()
 {
    if (jj_scan_token(OLTPBENCH)) return true;
    return false;
  }

  private boolean jj_3R_cpu_3375_3_165()
 {
    if (jj_scan_token(CPU)) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_1454_9_127()
 {
    if (jj_3R_InstanceOfExpression_1465_9_176()) return true;
    return false;
  }

  private boolean jj_3R_index_of_2220_9_145()
 {
    if (jj_scan_token(INDEX_OF)) return true;
    return false;
  }

  private boolean jj_3R_sysbench_io_2988_5_160()
 {
    if (jj_scan_token(SYSBENCH_IO)) return true;
    return false;
  }

  private boolean jj_3R_parameter_1828_10_33()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parameter_1828_10_33()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_parameter_1826_9_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_parameter_1840_9_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AndExpression_1441_9_77()
 {
    if (jj_3R_EqualityExpression_1454_9_127()) return true;
    return false;
  }

  private boolean jj_3R_calculate_2205_9_144()
 {
    if (jj_scan_token(CALCULATION)) return true;
    return false;
  }

  private boolean jj_3R_ExclusiveOrExpression_1430_9_71()
 {
    if (jj_3R_AndExpression_1441_9_77()) return true;
    return false;
  }

  private boolean jj_3R_touchstone_3350_3_164()
 {
    if (jj_scan_token(TOUCHSTONE)) return true;
    return false;
  }

  private boolean jj_3R_InclusiveOrExpression_1424_9_61()
 {
    if (jj_3R_ExclusiveOrExpression_1430_9_71()) return true;
    return false;
  }

  private boolean jj_3R_sql_1804_9_132()
 {
    if (jj_scan_token(SQL)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_1418_9_53()
 {
    if (jj_3R_InclusiveOrExpression_1424_9_61()) return true;
    return false;
  }

  private boolean jj_3R_nmon_2568_5_173()
 {
    if (jj_scan_token(NMON)) return true;
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_1412_9_44()
 {
    if (jj_3R_ConditionalAndExpression_1418_9_53()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_1406_9_35()
 {
    if (jj_3R_ConditionalOrExpression_1412_9_44()) return true;
    return false;
  }

  private boolean jj_3R_contain_2172_9_143()
 {
    if (jj_scan_token(CONTAIN)) return true;
    return false;
  }

  private boolean jj_3R_tpch_2549_5_170()
 {
    if (jj_scan_token(TPCH)) return true;
    return false;
  }

  private boolean jj_3R_Expression_1384_17_29()
 {
    if (jj_3R_ConditionalExpression_1406_9_35()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_1395_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_AssignmentOperator_1395_3_28()) return true;
    if (jj_3R_Expression_1384_17_29()) return true;
    return false;
  }

  private boolean jj_3R_get_cstat_1771_9_131()
 {
    if (jj_scan_token(GET_CSTAT)) return true;
    return false;
  }

  private boolean jj_3R_def_proc_2149_9_142()
 {
    if (jj_scan_token(DEF_PROC)) return true;
    return false;
  }

  private boolean jj_3R_sysbench_cpu_2911_5_159()
 {
    if (jj_scan_token(SYSBENCH_CPU)) return true;
    return false;
  }

  private boolean jj_3R_mysql_test_framework_2522_5_158()
 {
    if (jj_scan_token(MYSQL_TEST_FRAMEWORK)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_129_88()
 {
    if (jj_3R_sleep_2050_9_137()) return true;
    return false;
  }

  private boolean jj_3R_sysbench_mutex_3279_5_163()
 {
    if (jj_scan_token(SYSBENCH_MUTEX)) return true;
    return false;
  }

  private boolean jj_3R_end_parall_2508_9_152()
 {
    if (jj_scan_token(END_PARALL)) return true;
    return false;
  }

  private boolean jj_3R_get_pstat_1741_9_130()
 {
    if (jj_scan_token(GET_PSTAT)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_113_87()
 {
    if (jj_3R_verify_2024_9_136()) return true;
    return false;
  }

  private boolean jj_3R_mid_parall_2498_9_151()
 {
    if (jj_scan_token(MID_PARALL)) return true;
    return false;
  }

  private boolean jj_3R_import_irs_2111_9_141()
 {
    if (jj_scan_token(IMPORT_IRS)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_105_86()
 {
    if (jj_3R_tx_2003_9_135()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_102_96()
 {
    if (jj_3R_index_of_2220_9_145()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_99_115()
 {
    if (jj_3R_touchstone_3350_3_164()) return true;
    return false;
  }

  private boolean jj_3R_get_stat_1723_9_129()
 {
    if (jj_scan_token(GET_STAT)) return true;
    return false;
  }

  private boolean jj_3R_parall_2488_9_150()
 {
    if (jj_scan_token(PARALL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_94_109()
 {
    if (jj_3R_mysql_test_framework_2522_5_158()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_92_124()
 {
    if (jj_3R_nmon_2568_5_173()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_91_85()
 {
    if (jj_3R_csql_1937_9_134()) return true;
    return false;
  }

  private boolean jj_3R_get_conn_1711_9_128()
 {
    if (jj_scan_token(GET_CONN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_88_95()
 {
    if (jj_3R_calculate_2205_9_144()) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1325_9_56()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_InitedValue_1290_5_46()) return true;
    return false;
  }

  private boolean jj_3R_clear_dbi_2089_9_140()
 {
    if (jj_scan_token(CLEAR_DBI)) return true;
    return false;
  }

  private boolean jj_3R_clear_tbl_2471_9_149()
 {
    if (jj_scan_token(CLEAR_TBL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_80_114()
 {
    if (jj_3R_sysbench_mutex_3279_5_163()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_81_103()
 {
    if (jj_3R_end_parall_2508_9_152()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_81_84()
 {
    if (jj_3R_psql_1870_9_133()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_76_108()
 {
    if (jj_3R_end_benchmark_2759_5_157()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_74_123()
 {
    if (jj_3R_end_batch_sql_3561_9_172()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_76_94()
 {
    if (jj_3R_contain_2172_9_143()) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1312_9_55()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_start_databench_3612_5_175()
 {
    if (jj_scan_token(START_DATABENCH)) return true;
    return false;
  }

  private boolean jj_3R_import_dbi_2072_9_139()
 {
    if (jj_scan_token(IMPORT_DBI)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_66_102()
 {
    if (jj_3R_mid_parall_2498_9_151()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_66_83()
 {
    if (jj_3R_sql_1804_9_132()) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1301_10_62()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_60_122()
 {
    if (jj_3R_batch_sql_3547_5_171()) return true;
    return false;
  }

  private boolean jj_3R_import_tbl_2451_9_148()
 {
    if (jj_scan_token(IMPORT_TBL)) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1301_9_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InitedValue_1301_10_62()) jj_scanpos = xsp;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_62_93()
 {
    if (jj_3R_def_proc_2149_9_142()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_59_113()
 {
    if (jj_3R_sysbench_threads_3206_5_162()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_56_107()
 {
    if (jj_3R_start_benchmark_2733_5_156()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_55_101()
 {
    if (jj_3R_parall_2488_9_150()) return true;
    return false;
  }

  private boolean jj_3R_error_2060_9_138()
 {
    if (jj_scan_token(ERROR)) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1292_10_27()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_WhileStatement_1676_9_76()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_51_121()
 {
    if (jj_3R_tpch_2549_5_170()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InitedValue_1292_10_27()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_52_82()
 {
    if (jj_3R_get_cstat_1771_9_131()) return true;
    return false;
  }

  private boolean jj_3R_sysbench_threads_3206_5_162()
 {
    if (jj_scan_token(SYSBENCH_THREADS)) return true;
    return false;
  }

  private boolean jj_3R_InitedValue_1290_5_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_InitedValue_1301_9_54()) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_3R_InitedValue_1312_9_55()) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_3R_InitedValue_1325_9_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_47_92()
 {
    if (jj_3R_import_irs_2111_9_141()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_42_120()
 {
    if (jj_3R_file_3523_3_169()) return true;
    return false;
  }

  private boolean jj_3R_sleep_2050_9_137()
 {
    if (jj_scan_token(SLEEP)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_42_112()
 {
    if (jj_3R_sysbench_mem_3114_5_161()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_41_100()
 {
    if (jj_3R_clear_tbl_2471_9_149()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1635_36_126()
 {
    if (jj_3R_start_databench_3612_5_175()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_38_106()
 {
    if (jj_3R_sysbench_oltp_2791_5_155()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_1660_9_75()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_column_2426_9_147()
 {
    if (jj_scan_token(COLUMN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_34_119()
 {
    if (jj_3R_net_3477_3_168()) return true;
    return false;
  }

  private boolean jj_3R_init_databench_config_3577_5_174()
 {
    if (jj_scan_token(INIT_DATABENCH_CONFIG)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_36_81()
 {
    if (jj_3R_get_pstat_1741_9_130()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_33_91()
 {
    if (jj_3R_clear_dbi_2089_9_140()) return true;
    return false;
  }

  private boolean jj_3R_EmptyStatement_1653_9_72()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_26_111()
 {
    if (jj_3R_sysbench_io_2988_5_160()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_25_118()
 {
    if (jj_3R_disk_3438_3_167()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_26_99()
 {
    if (jj_3R_import_tbl_2451_9_148()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_end_batch_sql_3561_9_172()
 {
    if (jj_scan_token(END_BATCH_SQL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_23_80()
 {
    if (jj_3R_get_stat_1723_9_129()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_20_105()
 {
    if (jj_3R_benchmarksql_2683_3_154()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_17_117()
 {
    if (jj_3R_mem_3406_3_166()) return true;
    return false;
  }

  private boolean jj_3R_verify_2024_9_136()
 {
    if (jj_scan_token(VERIFY)) return true;
    return false;
  }

  private boolean jj_3R_sysbench_oltp_2791_5_155()
 {
    if (jj_scan_token(SYSBENCH_OLTP)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_15_98()
 {
    if (jj_3R_column_2426_9_147()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_15_90()
 {
    if (jj_3R_import_dbi_2072_9_139()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1635_9_125()
 {
    if (jj_3R_init_databench_config_3577_5_174()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1634_9_116()
 {
    if (jj_3R_cpu_3375_3_165()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaratorId_1256_3_78()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1633_9_110()
 {
    if (jj_3R_sysbench_cpu_2911_5_159()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1629_9_79()
 {
    if (jj_3R_get_conn_1711_9_128()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_batch_sql_3547_5_171()
 {
    if (jj_scan_token(BATCH_SQL)) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1628_9_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionStatement_1629_9_79()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_23_80()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_36_81()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_52_82()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_66_83()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_81_84()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_91_85()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_105_86()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_113_87()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1629_129_88()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_5_89()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_15_90()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_33_91()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_47_92()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_62_93()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_76_94()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_88_95()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1630_102_96()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_5_97()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_15_98()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_26_99()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_41_100()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_55_101()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_66_102()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1631_81_103()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_5_104()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_20_105()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_38_106()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_56_107()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_76_108()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1632_94_109()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_9_110()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_26_111()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_42_112()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_59_113()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_80_114()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1633_99_115()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_9_116()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_17_117()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_25_118()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_34_119()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_42_120()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_51_121()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_60_122()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_74_123()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1634_92_124()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1635_9_125()) {
    jj_scanpos = xsp;
    if (jj_3R_FunctionStatement_1635_36_126()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FunctionStatement_1632_5_104()
 {
    if (jj_3R_oltpbench_2604_9_153()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1631_5_97()
 {
    if (jj_3R_table_2296_9_146()) return true;
    return false;
  }

  private boolean jj_3R_FunctionStatement_1630_5_89()
 {
    if (jj_3R_error_2060_9_138()) return true;
    return false;
  }

  private boolean jj_3R_tx_2003_9_135()
 {
    if (jj_scan_token(TX)) return true;
    return false;
  }

  private boolean jj_3R_AssignValue_1601_17_73()
 {
    if (jj_3R_VariableDeclaratorId_1256_3_78()) return true;
    return false;
  }

  private boolean jj_3R_end_benchmark_2759_5_157()
 {
    if (jj_scan_token(END_BENCHMARK)) return true;
    return false;
  }

  private boolean jj_3R_file_3523_3_169()
 {
    if (jj_scan_token(FILE)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_DataType_1091_9_32()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(FK)) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1594_9_48()
 {
    if (jj_3R_Statement_1543_9_58()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1591_9_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BlockStatement_1591_9_47()) {
    jj_scanpos = xsp;
    if (jj_3R_BlockStatement_1594_9_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_BlockStatement_1591_9_47()
 {
    if (jj_3R_VariableDeclaration_1199_9_57()) return true;
    return false;
  }

  private boolean jj_3R_Block_1584_9_31()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_BlockStatement_1591_9_39()) return true;
    return false;
  }

  private boolean jj_3R_IdealResultSet_DataType_1182_27_59()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_BasicDataType_1127_9_49()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaration_1199_9_57()
 {
    if (jj_3R_DataType_1091_9_32()) return true;
    return false;
  }

  private boolean jj_3R_start_benchmark_2733_5_156()
 {
    if (jj_scan_token(START_BENCHMARK)) return true;
    return false;
  }

  private boolean jj_3R_sysbench_mem_3114_5_161()
 {
    if (jj_scan_token(SYSBENCH_MEM)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1574_9_70()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1569_9_69()
 {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1565_9_68()
 {
    if (jj_3R_WhileStatement_1676_9_76()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1563_9_67()
 {
    if (jj_3R_IfStatement_1660_9_75()) return true;
    return false;
  }

  private boolean jj_3R_IdealResultSet_DataType_1177_9_51()
 {
    if (jj_scan_token(IDEALRESULTSET)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_BasicDataType_1127_9_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_IdealResultSet_DataType_1182_27_59()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1552_17_66()
 {
    if (jj_3R_FunctionStatement_1628_9_74()) return true;
    return false;
  }

  private boolean jj_3R_net_3477_3_168()
 {
    if (jj_scan_token(NET)) return true;
    return false;
  }

  private boolean jj_3R_csql_1937_9_134()
 {
    if (jj_scan_token(CSQL)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1550_9_65()
 {
    if (jj_3R_AssignValue_1601_17_73()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1548_9_64()
 {
    if (jj_3R_VariableDeclaration_1199_9_57()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1546_9_63()
 {
    if (jj_3R_EmptyStatement_1653_9_72()) return true;
    return false;
  }

  private boolean jj_3R_List_DataType_1160_9_50()
 {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_BasicDataType_1127_9_49()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1543_9_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1546_9_63()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1548_9_64()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1550_9_65()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1552_17_66()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1563_9_67()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1565_9_68()) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1569_9_69()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1574_9_70()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_Block_1584_9_31()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_1533_9_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    if (jj_3R_UnaryExpression_1516_9_30()) return true;
    return false;
  }

  private boolean jj_3R_psql_1883_39_34()
 {
    if (jj_3R_parameter_1826_9_43()) return true;
    return false;
  }

  private boolean jj_3R_table_2296_9_146()
 {
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_benchmarksql_2683_3_154()
 {
    if (jj_scan_token(BENCHMARKSQL)) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1525_9_38()
 {
    if (jj_3R_InitedValue_1290_5_46()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1523_9_37()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public WoodpeckerParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[91];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0xfe1fffc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfffc1,0xffdfffc1,0xfe1fffc0,0xfe1fffc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xfe000000,0xfe000000,0x0,0x0,0x1ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x1ffffff,0x1ffffff,0xfe000000,0xfe000000,0x0,0xfe000000,0xfe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe000000,0x0,0x0,0xfe000000,0x0,0xfe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x2fff,0x807,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2fff,0x2fff,0x0,0x0,0x807,0x807,0x0,0x807,0x807,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x807,0x0,0x7ffc0000,0x1805,0x0,0x1805,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0xf4400000,0x0,0x0,0x0,0x0,0xf4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4400000,0x0,0x0,0x0,0xf4400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4000000,0xf4400000,0x0,0xf4400000,0x0,0x0,0x0,0xf4400000,0xf4400000,0x0,0xf4400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x404000,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,0x100,0x100,0x4000021,0x400,0x4000000,0x4000000,0x100,0x4000020,0x400,0x8000,0x200000,0x400000,0x40000000,0x80000000,0x20000000,0x120000,0x120000,0xc1800,0xc1800,0x6000000,0x6000000,0x18000000,0x18000000,0x6000000,0x4006020,0x6000,0x91,0x99,0x4000021,0x1,0x0,0x0,0x100,0x0,0x0,0x100,0x2,0x80,0x4000000,0x4000000,0x4000000,0x4000000,0x100,0x4000000,0x2,0x80,0x4000000,0x4000000,0x4000000,0x100,0x4000000,0x1e1800,0x80,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x100,0x100,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x200000,0x7ff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x240000,0x0,0x40000,0x40000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x240000,0x0,0x240000,0x0,0x0,0x0,0x240000,0x240000,0x0,0x240000,0x30000,0x0,0x40000,0x0,0x40000,0x240000,0x240000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WoodpeckerParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WoodpeckerParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new WoodpeckerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WoodpeckerParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new WoodpeckerParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new WoodpeckerParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WoodpeckerParser(WoodpeckerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WoodpeckerParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 91; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[182];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 91; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 182; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 12; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
